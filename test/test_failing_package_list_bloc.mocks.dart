// Mocks generated by Mockito 5.0.16 from annotations
// in miljohack/test/test_failing_package_list_bloc.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:miljohack/domain/main/data/mail_package.dart' as _i4;
import 'package:miljohack/infrastructure/network/api_client.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i2.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get host =>
      (super.noSuchMethod(Invocation.getter(#host), returnValue: '') as String);
  @override
  _i3.Future<bool> sendToken({String? token}) =>
      (super.noSuchMethod(Invocation.method(#sendToken, [], {#token: token}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i4.MailPackage>> loadPackages() => (super.noSuchMethod(
          Invocation.method(#loadPackages, []),
          returnValue: Future<List<_i4.MailPackage>>.value(<_i4.MailPackage>[]))
      as _i3.Future<List<_i4.MailPackage>>);
  @override
  _i3.Future<void> optimizePackage({int? packageId}) => (super.noSuchMethod(
      Invocation.method(#optimizePackage, [], {#packageId: packageId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> unOptimizePackage({int? packageId}) => (super.noSuchMethod(
      Invocation.method(#unOptimizePackage, [], {#packageId: packageId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}

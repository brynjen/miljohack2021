jobs:
  android:
    name: Miljohack
    runs-on: ubuntu-latest
    steps:
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.5.2'
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 'develop'
      - name: Get latest RT tag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: TeliaSoneraNorge/mssa-flutter
          regex: 'dev-release-\d+\.\d+\.\d+$'
        id: latest_dev_version  # The step ID to refer to later.
      - name: Get latest AT tag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: TeliaSoneraNorge/mssa-flutter
          regex: 'at-release-\d+\.\d+\.\d+$'
        id: latest_at_version  # The step ID to refer to later.
      - name: Get release log
        shell: bash
        run: ./.github/get_release_log.sh ${{ steps.latest_dev_version.outputs.tag }}
        id: release_log
      - uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY_TO_CHANNEL_API_REPO }}
      - name: Install packages and generate resources
        run: |
          flutter pub get
          flutter doctor -v
          flutter pub run intl_utils:generate && echo "Generated resources"
      - name: Run tests
        run: |
          echo ${{ steps.release_log.outputs.release_desc }}
          flutter test test/
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'
      - name: Install firebase cli
        run: npm install -g firebase-tools
      - name: Install gems
        run: |
          cd android &&
          gem install bundler &&
          bundle install
      - name: Run Fastlane to Build RT
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'to_firebase_distribution_for_dev_release'
          options: '{ "release_log": "${{ steps.release_log.outputs.release_desc }}" }'
          subdirectory: 'android/fastlane'
          skip-tracking: true
        env:
          SECRETS_DECRYPTION_KEY: ${{ secrets.SECRETS_DECRYPTION_KEY }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          BUILD_NUMBER: ${{ github.run_number }}
          GIT_TAG_REF: ${{ steps.latest_dev_version.outputs.tag }}
          SLACK_URL: ${{ secrets.SLACK_WEBHOOK }}
          COMMIT_USER: ${{ github.event.head_commit.author.username }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}

      - name: Run Fastlane to Build AT
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'telia_at'
          options: '{ "release_log": "${{ steps.release_log.outputs.release_desc }}" }'
          subdirectory: 'android/fastlane'
          skip-tracking: true
        env:
          SECRETS_DECRYPTION_KEY: ${{ secrets.SECRETS_DECRYPTION_KEY }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          BUILD_NUMBER: ${{ github.run_number }}
          GIT_TAG_REF: ${{ steps.latest_at_version.outputs.tag }}
          SLACK_URL: ${{ secrets.SLACK_WEBHOOK }}
          COMMIT_USER: ${{ github.event.head_commit.author.username }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          RELEASE_LOG: ${{ steps.release_log.outputs.release_desc}}
      - name: Clean up
        if: always()
        run: echo "Doing cleanup (empty atm.)"
      - name: Notify Slack if anything fails
        if: failure()
        run: |
          URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          BODY="{\"text\":\"Android build of ${{ github.ref }} failed by http://github.com/${{ github.actor }} \n$URL\", \"icon_url\": \"https://github.com/${{ github.actor }}.png?size=80\"}"
          curl -X POST -H "Content-type: application/json" --data "$BODY" ${{ secrets.SLACK_WEBHOOK }}
